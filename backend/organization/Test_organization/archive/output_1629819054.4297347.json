{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "setup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': 'c7b23143-c', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': '43c966a5-9', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n    \t\tobj[\"created_by\"]=Users.objects.get(id=1)\n    \t\tobj[\"updated_by\"]=Users.objects.get(id=1)\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:451: in create\n    obj = self.model(**kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:485: in __init__\n    _setattr(self, field.name, rel_obj)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor object at 0x0000015A3BADB188>\ninstance = <UserCompanyRole: UserCompanyRole object (None)>\nvalue = {'active': False, 'email': 'testuser8@momenttext.com', 'first_name': 'test', 'hashkey': '638a89b3-5', ...}\n\n    def __set__(self, instance, value):\n        \"\"\"\n        Set the related instance through the forward relation.\n    \n        With the example above, when setting ``child.parent = parent``:\n    \n        - ``self`` is the descriptor managing the ``parent`` attribute\n        - ``instance`` is the ``child`` instance\n        - ``value`` is the ``parent`` instance on the right of the equal sign\n        \"\"\"\n        # An object must be an instance of the related class.\n        if value is not None and not isinstance(value, self.field.remote_field.model._meta.concrete_model):\n            raise ValueError(\n                'Cannot assign \"%r\": \"%s.%s\" must be a \"%s\" instance.' % (\n                    value,\n                    instance._meta.object_name,\n                    self.field.name,\n>                   self.field.remote_field.model._meta.object_name,\n                )\nE               ValueError: Cannot assign \"{'first_name': 'test', 'last_name': 'user1', 'email': 'testuser8@momenttext.com', 'active': False, 'user_verified': False, 'password': '8c8dc5ced8f13d767526c4621e060f8e1eb8872ada3be5ca984f8b1ae478917f', 'token': '2c9db271-f2fa-4fb3-83d5-ce696f7f928f', 'hashkey': '638a89b3-5'}\": \"UserCompanyRole.role\" must be a \"Roles\" instance.\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\fields\\related_descriptors.py:220: ValueError\n", "test_name": "test_all_usercompanyrole[user-company-role]", "rerun": "0"}}, "suite_name": "organization/Test_organization/test_models.py"}}}, "date": "August 24, 2021", "start_time": 1629818716.0993412, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}