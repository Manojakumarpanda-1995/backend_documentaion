{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 12}, "tests": {"0": {"status": "ERROR", "message": "self = <django.db.backends.utils.CursorWrapper object at 0x000001C5EBA4F588>\nsql = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:57.457956', None, ...]\nignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x000001C5E9CD7108>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x000001C5EBA4F588>})\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n>               return self.cursor.execute(sql, params)\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EA591DC8>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:57.457956', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\nsetup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': '9c71ef1a-4', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': '2e2d09f6-c', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:618: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:453: in create\n    obj.save(force_insert=True, using=self.db)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:727: in save\n    force_update=force_update, update_fields=update_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:765: in save_base\n    force_update, using, update_fields,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:868: in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:908: in _do_insert\n    using=using, raw=raw,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:1270: in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py:1416: in execute_sql\n    cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\n    return executor(sql, params, many, context)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EA591DC8>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:57.457956', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       django.db.utils.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n", "test_name": "test_all_usercompanyrole[user-company-role0]", "rerun": "0"}, "1": {"status": "ERROR", "message": "self = <django.db.backends.utils.CursorWrapper object at 0x000001C5EA710A48>\nsql = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:58.105460', None, ...]\nignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x000001C5E9CD7108>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x000001C5EA710A48>})\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n>               return self.cursor.execute(sql, params)\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EA1ED438>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:58.105460', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\nsetup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': '481026c9-e', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': '5a2e0b4c-f', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:618: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:453: in create\n    obj.save(force_insert=True, using=self.db)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:727: in save\n    force_update=force_update, update_fields=update_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:765: in save_base\n    force_update, using, update_fields,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:868: in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:908: in _do_insert\n    using=using, raw=raw,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:1270: in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py:1416: in execute_sql\n    cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\n    return executor(sql, params, many, context)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EA1ED438>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:58.105460', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       django.db.utils.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n", "test_name": "test_all_usercompanyrole[user-company-role1]", "rerun": "0"}, "2": {"status": "ERROR", "message": "self = <django.db.backends.utils.CursorWrapper object at 0x000001C5EA663F48>\nsql = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:58.586537', None, ...]\nignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x000001C5E9CD7108>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x000001C5EA663F48>})\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n>               return self.cursor.execute(sql, params)\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBA494C8>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:58.586537', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\nsetup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': 'fcbaf3c9-d', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': '96cff531-f', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:618: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:453: in create\n    obj.save(force_insert=True, using=self.db)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:727: in save\n    force_update=force_update, update_fields=update_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:765: in save_base\n    force_update, using, update_fields,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:868: in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:908: in _do_insert\n    using=using, raw=raw,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:1270: in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py:1416: in execute_sql\n    cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\n    return executor(sql, params, many, context)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBA494C8>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:58.586537', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       django.db.utils.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n", "test_name": "test_all_usercompanyrole[user-company-role2]", "rerun": "0"}, "3": {"status": "ERROR", "message": "self = <django.db.backends.utils.CursorWrapper object at 0x000001C5EA61B548>\nsql = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:59.112452', None, ...]\nignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x000001C5E9CD7108>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x000001C5EA61B548>})\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n>               return self.cursor.execute(sql, params)\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EA591F78>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:59.112452', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\nsetup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': '4284f9a9-6', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': '1d6e0129-a', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:618: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:453: in create\n    obj.save(force_insert=True, using=self.db)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:727: in save\n    force_update=force_update, update_fields=update_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:765: in save_base\n    force_update, using, update_fields,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:868: in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:908: in _do_insert\n    using=using, raw=raw,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:1270: in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py:1416: in execute_sql\n    cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\n    return executor(sql, params, many, context)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EA591F78>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:59.112452', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       django.db.utils.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n", "test_name": "test_all_usercompanyrole[user-company-role3]", "rerun": "0"}, "4": {"status": "ERROR", "message": "self = <django.db.backends.utils.CursorWrapper object at 0x000001C5EA698E08>\nsql = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:59.641089', None, ...]\nignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x000001C5E9CD7108>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x000001C5EA698E08>})\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n>               return self.cursor.execute(sql, params)\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBD9AEE8>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:59.641089', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\nsetup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': 'bd842ace-6', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': '5bf6e6a0-6', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:618: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:453: in create\n    obj.save(force_insert=True, using=self.db)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:727: in save\n    force_update=force_update, update_fields=update_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:765: in save_base\n    force_update, using, update_fields,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:868: in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:908: in _do_insert\n    using=using, raw=raw,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:1270: in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py:1416: in execute_sql\n    cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\n    return executor(sql, params, many, context)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBD9AEE8>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:22:59.641089', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       django.db.utils.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n", "test_name": "test_all_usercompanyrole[user-company-role4]", "rerun": "0"}, "5": {"status": "ERROR", "message": "self = <django.db.backends.utils.CursorWrapper object at 0x000001C5EA71EAC8>\nsql = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:00.176989', None, ...]\nignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x000001C5E9CD7108>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x000001C5EA71EAC8>})\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n>               return self.cursor.execute(sql, params)\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBD9AF78>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:00.176989', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\nsetup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': '0288bc10-7', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': '72d59a0f-b', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:618: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:453: in create\n    obj.save(force_insert=True, using=self.db)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:727: in save\n    force_update=force_update, update_fields=update_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:765: in save_base\n    force_update, using, update_fields,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:868: in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:908: in _do_insert\n    using=using, raw=raw,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:1270: in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py:1416: in execute_sql\n    cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\n    return executor(sql, params, many, context)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBD9AF78>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:00.176989', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       django.db.utils.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n", "test_name": "test_all_usercompanyrole[user-company-role5]", "rerun": "0"}, "6": {"status": "ERROR", "message": "self = <django.db.backends.utils.CursorWrapper object at 0x000001C5EB899188>\nsql = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:00.654565', None, ...]\nignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x000001C5E9CD7108>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x000001C5EB899188>})\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n>               return self.cursor.execute(sql, params)\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EC185288>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:00.654565', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\nsetup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': '451effe9-9', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': 'f13bbe90-8', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:618: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:453: in create\n    obj.save(force_insert=True, using=self.db)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:727: in save\n    force_update=force_update, update_fields=update_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:765: in save_base\n    force_update, using, update_fields,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:868: in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:908: in _do_insert\n    using=using, raw=raw,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:1270: in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py:1416: in execute_sql\n    cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\n    return executor(sql, params, many, context)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EC185288>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:00.654565', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       django.db.utils.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n", "test_name": "test_all_usercompanyrole[user-company-role6]", "rerun": "0"}, "7": {"status": "ERROR", "message": "self = <django.db.backends.utils.CursorWrapper object at 0x000001C5EA60CB88>\nsql = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:01.177239', None, ...]\nignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x000001C5E9CD7108>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x000001C5EA60CB88>})\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n>               return self.cursor.execute(sql, params)\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBD8F798>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:01.177239', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\nsetup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': '37bf111e-f', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': 'd5d99eda-3', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:618: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:453: in create\n    obj.save(force_insert=True, using=self.db)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:727: in save\n    force_update=force_update, update_fields=update_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:765: in save_base\n    force_update, using, update_fields,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:868: in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:908: in _do_insert\n    using=using, raw=raw,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:1270: in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py:1416: in execute_sql\n    cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\n    return executor(sql, params, many, context)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBD8F798>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:01.177239', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       django.db.utils.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n", "test_name": "test_all_usercompanyrole[user-company-role7]", "rerun": "0"}, "8": {"status": "ERROR", "message": "self = <django.db.backends.utils.CursorWrapper object at 0x000001C5EBA37D88>\nsql = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:01.705648', None, ...]\nignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x000001C5E9CD7108>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x000001C5EBA37D88>})\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n>               return self.cursor.execute(sql, params)\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBBC2798>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:01.705648', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\nsetup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': '390a9553-4', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': '97a1217e-5', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:618: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:453: in create\n    obj.save(force_insert=True, using=self.db)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:727: in save\n    force_update=force_update, update_fields=update_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:765: in save_base\n    force_update, using, update_fields,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:868: in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:908: in _do_insert\n    using=using, raw=raw,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:1270: in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py:1416: in execute_sql\n    cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\n    return executor(sql, params, many, context)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBBC2798>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:01.705648', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       django.db.utils.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n", "test_name": "test_all_usercompanyrole[user-company-role8]", "rerun": "0"}, "9": {"status": "ERROR", "message": "self = <django.db.backends.utils.CursorWrapper object at 0x000001C5EB7CAFC8>\nsql = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:02.184070', None, ...]\nignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x000001C5E9CD7108>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x000001C5EB7CAFC8>})\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n>               return self.cursor.execute(sql, params)\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EB93C318>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:02.184070', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\nsetup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': '1582e71c-1', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': '775f2cfd-b', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:618: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:453: in create\n    obj.save(force_insert=True, using=self.db)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:727: in save\n    force_update=force_update, update_fields=update_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:765: in save_base\n    force_update, using, update_fields,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:868: in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:908: in _do_insert\n    using=using, raw=raw,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:1270: in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py:1416: in execute_sql\n    cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\n    return executor(sql, params, many, context)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EB93C318>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:02.184070', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       django.db.utils.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n", "test_name": "test_all_usercompanyrole[user-company-role9]", "rerun": "0"}, "10": {"status": "ERROR", "message": "self = <django.db.backends.utils.CursorWrapper object at 0x000001C5EBC9A508>\nsql = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:02.703744', None, ...]\nignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x000001C5E9CD7108>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x000001C5EBC9A508>})\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n>               return self.cursor.execute(sql, params)\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBBC2CA8>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:02.703744', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\nsetup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': '9a40c797-5', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': 'b64f91c5-a', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:618: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:453: in create\n    obj.save(force_insert=True, using=self.db)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:727: in save\n    force_update=force_update, update_fields=update_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:765: in save_base\n    force_update, using, update_fields,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:868: in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:908: in _do_insert\n    using=using, raw=raw,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:1270: in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py:1416: in execute_sql\n    cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\n    return executor(sql, params, many, context)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBBC2CA8>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:02.703744', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       django.db.utils.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n", "test_name": "test_all_usercompanyrole[user-company-role10]", "rerun": "0"}, "11": {"status": "ERROR", "message": "self = <django.db.backends.utils.CursorWrapper object at 0x000001C5EA70C088>\nsql = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:03.231368', None, ...]\nignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x000001C5E9CD7108>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x000001C5EA70C088>})\n\n    def _execute(self, sql, params, *ignored_wrapper_args):\n        self.db.validate_no_broken_transaction()\n        with self.db.wrap_database_errors:\n            if params is None:\n                # params default might be backend specific.\n                return self.cursor.execute(sql)\n            else:\n>               return self.cursor.execute(sql, params)\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBB45A68>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:03.231368', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       sqlite3.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n\nThe above exception was the direct cause of the following exception:\n\nsetup_random_user = [{'active': True, 'email': 'testuser1@momenttext.com', 'first_name': 'test', 'hashkey': '8f8a9791-c', ...}, {'active':... ...}, {'active': False, 'email': 'testuser6@momenttext.com', 'first_name': 'test', 'hashkey': '345f6307-6', ...}, ...]\n\n    @pytest.fixture\n    def setup_usercompany_role(setup_random_user):\n    \tusers=setup_random_user\n    \n    \t#To list all user\n    \tcompany_admin=Roles.objects.get(id=2)\n    \tproject_admin=Roles.objects.get(id=3)\n    \tuser=Roles.objects.get(id=4)\n    \tcompanies=[fake.company() for x in range(4)]\n    \tfor company in companies:\n    \t\tgetCompany=Company.objects.create(name=company,created_by=Users.objects.get(id=1)\n    \t\t\t\t\t\t\t\t\t\t\t,updated_by=Users.objects.get(id=1))\n    \n        #To list all company\n    \tcompany1=Company.objects.get(name=companies[0])\n    \tcompany2=Company.objects.get(name=companies[1])\n    \tcompany3=Company.objects.get(name=companies[2])\n    \tcompany4=Company.objects.get(name=companies[3])\n    \n    \tfor user in users:\n    \t\tgetUsers=Users.objects.create(**user)\n    \n    \t#To list all users\n    \tuser1=Users.objects.get(email=\"testuser1@momenttext.com\")\n    \tuser2=Users.objects.get(email=\"testuser2@momenttext.com\")\n    \tuser3=Users.objects.get(email=\"testuser3@momenttext.com\")\n    \tuser4=Users.objects.get(email=\"testuser4@momenttext.com\")\n    \tuser5=Users.objects.get(email=\"testuser5@momenttext.com\")\n    \tuser6=Users.objects.get(email=\"testuser6@momenttext.com\")\n    \t#Users 1 with company 1,2,3 all user\n    \tgetUserCompanyRoles=[{\"user\":user1,\"company\":company2,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user1,\"company\":company3,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company2,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user2,\"company\":company3,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company1,\"role\":project_admin}\n    \t\t\t\t\t\t,{\"user\":user3,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user4,\"company\":company4,\"role\":company_admin}\n    \t\t\t\t\t\t,{\"user\":user5,\"company\":company4,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company1,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company2,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company3,\"role\":user}\n    \t\t\t\t\t\t,{\"user\":user6,\"company\":company4,\"role\":user}\n          \t\t\t\t\t]\n    \tfor obj in getUserCompanyRoles:\n>   \t\tgetUserCompanyRole=UserCompanyRole.objects.create(**obj)\n\n..\\..\\conftest.py:618: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:453: in create\n    obj.save(force_insert=True, using=self.db)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:727: in save\n    force_update=force_update, update_fields=update_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:765: in save_base\n    force_update, using, update_fields,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:868: in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\base.py:908: in _do_insert\n    using=using, raw=raw,\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:1270: in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py:1416: in execute_sql\n    cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\n    return executor(sql, params, many, context)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\n    return self.cursor.execute(sql, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x000001C5EBB45A68>\nquery = 'INSERT INTO \"UserCompanyRole\" (\"user_id\", \"company_id\", \"role_id\", \"isActive\", \"created_at\", \"created_by_id\", \"updated_at\", \"updated_by_id\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\nparams = [6, 10, 2, True, '2021-08-24 15:23:03.231368', None, ...]\n\n    def execute(self, query, params=None):\n        if params is None:\n            return Database.Cursor.execute(self, query)\n        query = self.convert_query(query)\n>       return Database.Cursor.execute(self, query, params)\nE       django.db.utils.IntegrityError: NOT NULL constraint failed: UserCompanyRole.created_by_id\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:423: IntegrityError\n", "test_name": "test_all_usercompanyrole[user-company-role11]", "rerun": "0"}}, "suite_name": "organization/Test_organization/test_models.py"}}}, "date": "August 24, 2021", "start_time": 1629818583.109441, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "12", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "12"}