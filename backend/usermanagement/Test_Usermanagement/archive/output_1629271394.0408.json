{"content": {"suites": {"0": {"status": {"total_pass": 24, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_users", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_random_user", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_user_status[testuser1@kpmg.com-True-False]", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_user_status[testuser2@kpmg.com-True-False]", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_user_status[testuser3@kpmg.com-True-False]", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_user_status[testuser4@kpmg.com-False-True]", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_user_status[testuser5@kpmg.com-False-True]", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_user_status[testuser6@kpmg.com-False-True]", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_user_status[testuser7@kpmg.com-False-False]", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_user_status[testuser8@kpmg.com-False-False]", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_access_status[testuser1@kpmg.com-True-False]", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_access_status[testuser2@kpmg.com-True-False]", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_access_status[testuser3@kpmg.com-True-False]", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_access_status[testuser4@kpmg.com-False-True]", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_access_status[testuser5@kpmg.com-False-True]", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_access_status[testuser6@kpmg.com-False-True]", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_access_status[testuser7@kpmg.com-False-False]", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_access_status[testuser8@kpmg.com-False-False]", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_all_access_status", "rerun": "0"}, "19": {"status": "PASS", "message": "", "test_name": "test_roles[1-SUPER-USER]", "rerun": "0"}, "20": {"status": "PASS", "message": "", "test_name": "test_roles[4-USER]", "rerun": "0"}, "21": {"status": "PASS", "message": "", "test_name": "test_roles[3-PROJECT-ADMIN]", "rerun": "0"}, "22": {"status": "PASS", "message": "", "test_name": "test_roles[2-COMPANY-ADMIN]", "rerun": "0"}, "23": {"status": "PASS", "message": "", "test_name": "test_roles[5-ADMINS]", "rerun": "0"}, "24": {"status": "ERROR", "message": "setup_random_user = [{'active': True, 'email': 'testuser1@kpmg.com', 'first_name': 'test', 'hashkey': '71568a9c-4', ...}, {'active': True,...0e-e', ...}, {'active': False, 'email': 'testuser6@kpmg.com', 'first_name': 'test', 'hashkey': '4f152346-2', ...}, ...]\n\n    @pytest.fixture\n    def setup_temporary_urls(setup_random_user):\n    \tusers=setup_random_user\n    \n    \tfor x in range(1,len(users)+1):\n>   \t\tgetUser=Users.objects.get(email__iexact=users[x][\"email\"])\n\n..\\..\\conftest.py:201: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <QuerySet [<Users: Users object (1)>]>, args = (), kwargs = {'email__iexact': 'testuser2@kpmg.com'}\nclone = <QuerySet []>, limit = 21, num = 0\n\n    def get(self, *args, **kwargs):\n        \"\"\"\n        Perform the query and return a single object matching the given\n        keyword arguments.\n        \"\"\"\n        if self.query.combinator and (args or kwargs):\n            raise NotSupportedError(\n                'Calling QuerySet.get(...) with filters after %s() is not '\n                'supported.' % self.query.combinator\n            )\n        clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)\n        if self.query.can_filter() and not self.query.distinct_fields:\n            clone = clone.order_by()\n        limit = None\n        if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:\n            limit = MAX_GET_RESULTS\n            clone.query.set_limits(high=limit)\n        num = len(clone)\n        if num == 1:\n            return clone._result_cache[0]\n        if not num:\n            raise self.model.DoesNotExist(\n                \"%s matching query does not exist.\" %\n>               self.model._meta.object_name\n            )\nE           usermanagement.models.Users.DoesNotExist: Users matching query does not exist.\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:437: DoesNotExist\n", "test_name": "test_temporary_url", "rerun": "0"}}, "suite_name": "usermanagement/Test_usermanagement/test_models.py"}}}, "date": "August 18, 2021", "start_time": 1629271194.8014824, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "24", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "25"}