{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "setup_random_user = [{'active': True, 'email': 'testuser1@kpmg.com', 'first_name': 'test', 'hashkey': '819aed54-1', ...}, {'active': True,...8d-5', ...}, {'active': False, 'email': 'testuser6@kpmg.com', 'first_name': 'test', 'hashkey': 'a5224770-9', ...}, ...]\n\n    @pytest.fixture\n    def setup_temporary_urls(setup_random_user):\n    \tusers=setup_random_user\n    \n    \tfor x in range(1,len(users)+1):\n>   \t\tgetUser=Users.objects.get(email__iexact=users[x][\"email\"])\n\n..\\..\\conftest.py:201: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\manager.py:85: in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <QuerySet [<Users: Users object (1)>]>, args = (), kwargs = {'email__iexact': 'testuser2@kpmg.com'}\nclone = <QuerySet []>, limit = 21, num = 0\n\n    def get(self, *args, **kwargs):\n        \"\"\"\n        Perform the query and return a single object matching the given\n        keyword arguments.\n        \"\"\"\n        if self.query.combinator and (args or kwargs):\n            raise NotSupportedError(\n                'Calling QuerySet.get(...) with filters after %s() is not '\n                'supported.' % self.query.combinator\n            )\n        clone = self._chain() if self.query.combinator else self.filter(*args, **kwargs)\n        if self.query.can_filter() and not self.query.distinct_fields:\n            clone = clone.order_by()\n        limit = None\n        if not clone.query.select_for_update or connections[clone.db].features.supports_select_for_update_with_limit:\n            limit = MAX_GET_RESULTS\n            clone.query.set_limits(high=limit)\n        num = len(clone)\n        if num == 1:\n            return clone._result_cache[0]\n        if not num:\n            raise self.model.DoesNotExist(\n                \"%s matching query does not exist.\" %\n>               self.model._meta.object_name\n            )\nE           usermanagement.models.Users.DoesNotExist: Users matching query does not exist.\n\n..\\..\\..\\mmtxt\\lib\\site-packages\\django\\db\\models\\query.py:437: DoesNotExist\n", "test_name": "test_temporary_url", "rerun": "0"}}, "suite_name": "usermanagement/Test_usermanagement/test_models.py"}}}, "date": "August 18, 2021", "start_time": 1629271394.0408, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}